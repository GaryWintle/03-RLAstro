---
import { Image } from "astro:assets";

// Import all images from the gallery folder as modules
const images = import.meta.glob("../assets/homepage/gallery/*.{png,jpg,jpeg,gif,webp}", { eager: true });

// Correctly extract the image paths from the imported modules
const imageModules = Object.values(images).map(img => {
  // Log the imported module to understand its structure
  console.log('Imported image module:', img);
  
  // Return the image source path
  return img.default;
});
---

<div class="image-collage">
  {imageModules.map((imgSrc, index) => (
    <Image 
      src={imgSrc} 
      alt={`Gallery Image ${index + 1}`} 
      class="collage-image"
      width={300}
      height={200}
      format="webp"
    />
  ))}
</div>

<script>
  // Use the same glob import method for dynamic loading
  const imageModules = import.meta.glob(
    "../assets/homepage/gallery/*.{png,jpg,jpeg,gif,webp}",
    { eager: true }
  );

  // Convert the modules object to an array of image URLs
  const imageLibrary = Object.keys(imageModules).map((path) => 
    new URL(path, import.meta.url).href
  );

  const collageContainer = document.querySelector(".image-collage");

  // Track the currently displayed images
  let currentImages = [];

  // Initialize collage with unique images
  const initialImages = getUniqueImages(9);
  currentImages = [...initialImages];

  // Render initial images
  collageContainer.innerHTML = initialImages
    .map(
      (img) => `
        <img src="${img}" alt="Dynamic collage image" class="collage-image" loading="lazy">
      `
    )
    .join("");

  // Get a specified number of unique images
  function getUniqueImages(count, excludeImages = []) {
    const availableImages = imageLibrary.filter(
      (img) => !excludeImages.includes(img)
    );

    // Shuffle available images and return the required number
    return shuffleArray(availableImages).slice(0, count);
  }

  // Shuffle an array
  function shuffleArray(array) {
    return array.sort(() => Math.random() - 0.5);
  }
</script>